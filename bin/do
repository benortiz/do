#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')
require 'gli'
require 'do'
require 'tempfile'

def class_exists?(class_name)
  klass = Module.const_get(class_name)
  return klass.is_a?(Class)
rescue NameError
  return false
end

if class_exists? 'Encoding'
  Encoding.default_external = Encoding::UTF_8 if Encoding.respond_to?('default_external')
  Encoding.default_internal = Encoding::UTF_8 if Encoding.respond_to?('default_internal')
end


include GLI::App
version Do::VERSION

cmd = Do::Cmd.new

program_desc ''

default_command :recent

desc 'Output notes if included in the template'
default_value true
switch [:notes], :default_value => true, :negatable => true

desc 'Specify a different doing_file'
flag [:f, :doing_file]

desc 'Add an entry'
arg_name 'entry'
command :now do |c|
  c.desc 'Project'
  c.arg_name 'project_name'
  c.default_value Do.config.default_project
  c.flag [:p, :section], :default_value => Do.config.default_project

  c.desc "Edit entry with #{ENV['EDITOR']}"
  c.switch [:e, :editor]

  c.action do |global_options, options, args|
    cmd.now(options, args)
  end
end

post do |global,command,options,args|
  # Use skips_post before a command to skip this
  # block on that command only
  $stderr.puts cmd.results.join("\n")
end

on_error do |exception|
  # puts exception.message
  true
end

exit run(ARGV)
